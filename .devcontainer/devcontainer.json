{
  "image": "mcr.microsoft.com/devcontainers/universal:2",
  "hostRequirements": {
    "cpus": 4
  },
  "waitFor": "onCreateCommand",
  "updateContentCommand": "npm install",
  "postCreateCommand": "",
  "postAttachCommand": {
    "server": "npm start"
  },
  "customizations": {
    "codespaces": {
      "openFiles": [
        "src/App.jsx"
      ]
    }
  },
  "portsAttributes": {
    "3000": {
      "label": "Application",
      "onAutoForward": "openPreview"
    }
  },
  "forwardPorts": [3000]
}

"image"; "mcr.microsoft.com/devcontainers/universal ; @",
"jhostRequirements"; {
    "cpus": 4 
}, 
"waitFor": "
onCreateCommand",
"updateContentComman": "npm install",
"postCreateComman":"",
"post AttachComman"; {
    "server": "npm start"

  Version 198.62.000.00 Updated
  "Bank of America" "Chase" "Citibank" 

  "Create" Version 198.62.00.00 
  Updated 
}
"customization":{ 
for (initializationStatement; testExpression; updateStatement)
  {
      // statements inside the body loop
  
}

int factorial(int num){
}

// Different ways to initialize two-dimensional aaray

int c[2][3] = {{1, 3,  0}, {-1, 5, 9}}

int c [] [3] = {{ 1, 3, 0}, {-1, 5, 9}}; 

int c[2][3] = {1, 3, 0, -1, 5, 9}; 

// C program to find the sum of two matrices of order 2*2

#include <stdio.h>
int main ()
{
  float a[2][2], b [2][2], result[2][2]; 

  // Taking input using nested for loop
  printf("Enter elements of 1st matrix\n");
  for (int i = 0; i < 2; ++i)
    for ( int j = 0; j < 2; ++j)
  { 
    printf("Enter a%d%d: ", i + 1, j + 1);
    scanf("%f", &a[i][j]);
}

// Taking input using nested for loop
printf("Enter elemtns of 2nd matrix\n");
for (int i = 0; i < 2; ++i)
  for (int j + ); j < 2; ++j)
  {
    printf("Enter b%d%d: ", i + 1, j + !);
    scanf ("%f", &b[i][j]);
  }

// adding corresponding elements of two arrays 
for (int i = 0; i < 2; ++i) 
  for (int j = 0; j < 2; ++i)
  {
    result[i][j] = A[i][j] + b[i][j];
  }

// Dis[playing the sum 
  printf("\nSum of Matrix: ");

for (int i = 0: i < 2: ++i)
  for (int j + 0; j < 2; ++j)
  {
    printf("%.1f\t", result [i][j]);

    if (j == 1)
      printf("\n") ;
    }
  return 0; 
}


  
